1. CSS-правила

CSS — это язык для оформления структурированных документов, например, HTML- документов. 
Синтаксис — это плоский список CSS-правил. CSS-правило состоит из селектора и перечня свойств и их значений:

селектор {
  свойство: значение;
  свойство: значение;
}

Для комментариев в CSS используются символы /* и */.


2. Селекторы

Селектор находится в начале CSS-правила, до фигурных скобок, и определяет, к каким HTML-элементам применятся свойства и значения из правила.

.feature-kitten {
  padding-top: 60px;
}

Простейшие (и самые популярные) селекторы — это селекторы по тегам, например -  h1
Самые популярные по классам , например - content

Вложенные селекторы - это комбинация из нескольких селекторов разделенных пробелами, например - nav a {…}

3. Свойства и значения

Список свойств и значений находится внутри фигурных скобок CSS-правила. 
Свойство определяет, какую характеристику внешнего вида мы хотим изменить, а значение — как именно.

.feature-kitten {
  padding-top: 60px;
}

5. Составные свойства
В CSS есть обычные свойства, управляющие одним параметром отображения, 
и есть составные свойства, управляющие одновременно несколькими параметрами. 
Например, свойство font. Оно задаёт сразу шесть параметров: размер и название шрифта, высоту строки и некоторые другие.

font: 16px/26px "Arial", sans-serif;

font-family: "Arial", sans-serif;
font-size: 16px;
line-height: 26px;

Если значение обычного свойства не было задано в составном, 
то браузер при «расшифровке» использует исходное значение этого свойства.

6. Типы значений: абсолютные и относительные
Абсолютные единицы измерения привязаны к настоящим физическим размерам и связаны между собой жёсткими пропорциями. 
Пиксели, px, используют чаще всего, остальные абсолютные единицы почти не применяют. Примеры абсолютных единиц измерения:

font-size: 1cm;
font-size: 10mm;
font-size: 38px;

Относительные единицы измерения описывают значения, 
которые зависят от других значений. 
Например, ширина элемента в процентах зависит от ширины родительского элемента, 
а ширина элемента в em зависит от размера шрифта самого элемента. 
К относительным единицам относятся em, rem, vh, vw и некоторые другие, ну и, конечно же, проценты.

7. Стили по умолчанию
Некоторым элементам можно не задавать никаких стилей, 
но у них всё равно будет какое-то оформление. 
Например, у списка <ul> есть отступы и маркеры. 
Такие стили называются стилями по умолчанию и задаются внутри браузерных стилей изначально. 
Их можно переопределить или сбросить, задав другие значения свойств элементу.

9. Конфликт свойств
На один элемент могут действовать несколько CSS-правил. 
Если в этих правилах есть одинаковые свойства с разными значениями, то возникает конфликт. Например:

ul { list-style: disc; }
.blog-navigation ul { list-style: none; }

Браузеру нужно как-то решать, какими будут итоговые значения конфликтующих свойств. 
Конфликт разрешается максимум за три шага. Если на текущем шаге определиться не удалось, 
то выполняется следующий шаг. Вот эти шаги:

Сравниваются приоритеты стилевых файлов, в которых находятся конфликтующие свойства. 
Например, авторские (то есть наши) стили приоритетнее браузерных.
Сравнивается специфичность селекторов у CSS-правил с конфликтующими свойствами. 
Например, селектор по классу более специфичен, чем селектор по тегу.
Побеждает то свойство, которое находится ниже в коде.
Каскад работает и внутри CSS-правил.

10. Встраивание и подключение внешних стилей

Внешние стили подключаются через тег <link>
<link rel="stylesheet" href="style.css">

Встраивание стилей в тег <style>. Его обычно размещают внутри <head>:

<head>
  <style>
    CSS-код
  </style>
</head>

Такой способ используется для оптимизации загрузки страницы, 
ведь в таком случае браузер не будет отправлять дополнительных запросов на сервер.

Встраивание в атрибут style:

<div style="width: 50%;"></div>

Свойства и значения, прописанные таким образом, применятся точечно к одному элементу.

Обычно использование этого способа считается плохой практикой. 
Но иногда в виде исключения бывает удобнее воспользоваться встраиванием стилей в атрибут style, 
чем писать отдельные CSS-правила. 
Например, когда нужно управлять стилями именно из разметки, 
и создавать отдельные классы при этом будет излишне. 
Так бывает, когда какие-то стилевые параметры устанавливаются 
помощью сторонних программ или другими людьми, например, через CMS.

